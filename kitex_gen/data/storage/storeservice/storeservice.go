// Code generated by Kitex v0.11.3. DO NOT EDIT.

package storeservice

import (
	storage "cloud_tinamic/kitex_gen/data/storage"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"VectorToPGStorage": kitex.NewMethodInfo(
		vectorToPGStorageHandler,
		newStoreServiceVectorToPGStorageArgs,
		newStoreServiceVectorToPGStorageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ToGeoParquetStorage": kitex.NewMethodInfo(
		toGeoParquetStorageHandler,
		newStoreServiceToGeoParquetStorageArgs,
		newStoreServiceToGeoParquetStorageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	storeServiceServiceInfo                = NewServiceInfo()
	storeServiceServiceInfoForClient       = NewServiceInfoForClient()
	storeServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return storeServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return storeServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return storeServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "StoreService"
	handlerType := (*storage.StoreService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "storage",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func vectorToPGStorageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*storage.StoreServiceVectorToPGStorageArgs)
	realResult := result.(*storage.StoreServiceVectorToPGStorageResult)
	success, err := handler.(storage.StoreService).VectorToPGStorage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newStoreServiceVectorToPGStorageArgs() interface{} {
	return storage.NewStoreServiceVectorToPGStorageArgs()
}

func newStoreServiceVectorToPGStorageResult() interface{} {
	return storage.NewStoreServiceVectorToPGStorageResult()
}

func toGeoParquetStorageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*storage.StoreServiceToGeoParquetStorageArgs)
	realResult := result.(*storage.StoreServiceToGeoParquetStorageResult)
	success, err := handler.(storage.StoreService).ToGeoParquetStorage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newStoreServiceToGeoParquetStorageArgs() interface{} {
	return storage.NewStoreServiceToGeoParquetStorageArgs()
}

func newStoreServiceToGeoParquetStorageResult() interface{} {
	return storage.NewStoreServiceToGeoParquetStorageResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) VectorToPGStorage(ctx context.Context, req *storage.VectorToPGStorageRequest) (r *storage.VectorToPGStorageResponse, err error) {
	var _args storage.StoreServiceVectorToPGStorageArgs
	_args.Req = req
	var _result storage.StoreServiceVectorToPGStorageResult
	if err = p.c.Call(ctx, "VectorToPGStorage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ToGeoParquetStorage(ctx context.Context, req *storage.ToGeoParquetStorageRequest) (r *storage.ToGeoParquetStorageResponse, err error) {
	var _args storage.StoreServiceToGeoParquetStorageArgs
	_args.Req = req
	var _result storage.StoreServiceToGeoParquetStorageResult
	if err = p.c.Call(ctx, "ToGeoParquetStorage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
