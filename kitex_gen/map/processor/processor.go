// Code generated by thriftgo (0.3.17). DO NOT EDIT.

package processor

import (
	"bytes"
	"cloud_tinamic/kitex_gen/base"
	"context"
	"fmt"
	thrift "github.com/cloudwego/kitex/pkg/protocol/bthrift/apache"
	"strings"
)

type VectorThumbnailRequest struct {
	FilePath string `thrift:"file_path,1" frugal:"1,default,string" json:"file_path"`
	Width    int32  `thrift:"width,2" frugal:"2,default,i32" json:"width"`
	Height   int32  `thrift:"height,3" frugal:"3,default,i32" json:"height"`
}

func NewVectorThumbnailRequest() *VectorThumbnailRequest {
	return &VectorThumbnailRequest{}
}

func (p *VectorThumbnailRequest) InitDefault() {
}

func (p *VectorThumbnailRequest) GetFilePath() (v string) {
	return p.FilePath
}

func (p *VectorThumbnailRequest) GetWidth() (v int32) {
	return p.Width
}

func (p *VectorThumbnailRequest) GetHeight() (v int32) {
	return p.Height
}
func (p *VectorThumbnailRequest) SetFilePath(val string) {
	p.FilePath = val
}
func (p *VectorThumbnailRequest) SetWidth(val int32) {
	p.Width = val
}
func (p *VectorThumbnailRequest) SetHeight(val int32) {
	p.Height = val
}

var fieldIDToName_VectorThumbnailRequest = map[int16]string{
	1: "file_path",
	2: "width",
	3: "height",
}

func (p *VectorThumbnailRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VectorThumbnailRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VectorThumbnailRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FilePath = _field
	return nil
}
func (p *VectorThumbnailRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Width = _field
	return nil
}
func (p *VectorThumbnailRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Height = _field
	return nil
}

func (p *VectorThumbnailRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VectorThumbnailRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VectorThumbnailRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("file_path", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FilePath); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VectorThumbnailRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("width", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Width); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VectorThumbnailRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("height", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Height); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *VectorThumbnailRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VectorThumbnailRequest(%+v)", *p)

}

func (p *VectorThumbnailRequest) DeepEqual(ano *VectorThumbnailRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FilePath) {
		return false
	}
	if !p.Field2DeepEqual(ano.Width) {
		return false
	}
	if !p.Field3DeepEqual(ano.Height) {
		return false
	}
	return true
}

func (p *VectorThumbnailRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.FilePath, src) != 0 {
		return false
	}
	return true
}
func (p *VectorThumbnailRequest) Field2DeepEqual(src int32) bool {

	if p.Width != src {
		return false
	}
	return true
}
func (p *VectorThumbnailRequest) Field3DeepEqual(src int32) bool {

	if p.Height != src {
		return false
	}
	return true
}

type VectorThumbnailRespose struct {
	Base      *base.BaseResp `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
	Thumbnail []byte         `thrift:"thumbnail,2" frugal:"2,default,binary" json:"thumbnail"`
}

func NewVectorThumbnailRespose() *VectorThumbnailRespose {
	return &VectorThumbnailRespose{}
}

func (p *VectorThumbnailRespose) InitDefault() {
}

var VectorThumbnailRespose_Base_DEFAULT *base.BaseResp

func (p *VectorThumbnailRespose) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return VectorThumbnailRespose_Base_DEFAULT
	}
	return p.Base
}

func (p *VectorThumbnailRespose) GetThumbnail() (v []byte) {
	return p.Thumbnail
}
func (p *VectorThumbnailRespose) SetBase(val *base.BaseResp) {
	p.Base = val
}
func (p *VectorThumbnailRespose) SetThumbnail(val []byte) {
	p.Thumbnail = val
}

var fieldIDToName_VectorThumbnailRespose = map[int16]string{
	1: "base",
	2: "thumbnail",
}

func (p *VectorThumbnailRespose) IsSetBase() bool {
	return p.Base != nil
}

func (p *VectorThumbnailRespose) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VectorThumbnailRespose[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VectorThumbnailRespose) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}
func (p *VectorThumbnailRespose) ReadField2(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.Thumbnail = _field
	return nil
}

func (p *VectorThumbnailRespose) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VectorThumbnailRespose"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VectorThumbnailRespose) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VectorThumbnailRespose) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("thumbnail", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.Thumbnail)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VectorThumbnailRespose) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VectorThumbnailRespose(%+v)", *p)

}

func (p *VectorThumbnailRespose) DeepEqual(ano *VectorThumbnailRespose) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Thumbnail) {
		return false
	}
	return true
}

func (p *VectorThumbnailRespose) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *VectorThumbnailRespose) Field2DeepEqual(src []byte) bool {

	if bytes.Compare(p.Thumbnail, src) != 0 {
		return false
	}
	return true
}

type MapProcessorService interface {
	VectorThumbnail(ctx context.Context, req *VectorThumbnailRequest) (r *VectorThumbnailRespose, err error)
}

type MapProcessorServiceVectorThumbnailArgs struct {
	Req *VectorThumbnailRequest `thrift:"req,1" frugal:"1,default,VectorThumbnailRequest" json:"req"`
}

func NewMapProcessorServiceVectorThumbnailArgs() *MapProcessorServiceVectorThumbnailArgs {
	return &MapProcessorServiceVectorThumbnailArgs{}
}

func (p *MapProcessorServiceVectorThumbnailArgs) InitDefault() {
}

var MapProcessorServiceVectorThumbnailArgs_Req_DEFAULT *VectorThumbnailRequest

func (p *MapProcessorServiceVectorThumbnailArgs) GetReq() (v *VectorThumbnailRequest) {
	if !p.IsSetReq() {
		return MapProcessorServiceVectorThumbnailArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MapProcessorServiceVectorThumbnailArgs) SetReq(val *VectorThumbnailRequest) {
	p.Req = val
}

var fieldIDToName_MapProcessorServiceVectorThumbnailArgs = map[int16]string{
	1: "req",
}

func (p *MapProcessorServiceVectorThumbnailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MapProcessorServiceVectorThumbnailArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MapProcessorServiceVectorThumbnailArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MapProcessorServiceVectorThumbnailArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewVectorThumbnailRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MapProcessorServiceVectorThumbnailArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VectorThumbnail_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MapProcessorServiceVectorThumbnailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MapProcessorServiceVectorThumbnailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MapProcessorServiceVectorThumbnailArgs(%+v)", *p)

}

func (p *MapProcessorServiceVectorThumbnailArgs) DeepEqual(ano *MapProcessorServiceVectorThumbnailArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MapProcessorServiceVectorThumbnailArgs) Field1DeepEqual(src *VectorThumbnailRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MapProcessorServiceVectorThumbnailResult struct {
	Success *VectorThumbnailRespose `thrift:"success,0,optional" frugal:"0,optional,VectorThumbnailRespose" json:"success,omitempty"`
}

func NewMapProcessorServiceVectorThumbnailResult() *MapProcessorServiceVectorThumbnailResult {
	return &MapProcessorServiceVectorThumbnailResult{}
}

func (p *MapProcessorServiceVectorThumbnailResult) InitDefault() {
}

var MapProcessorServiceVectorThumbnailResult_Success_DEFAULT *VectorThumbnailRespose

func (p *MapProcessorServiceVectorThumbnailResult) GetSuccess() (v *VectorThumbnailRespose) {
	if !p.IsSetSuccess() {
		return MapProcessorServiceVectorThumbnailResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MapProcessorServiceVectorThumbnailResult) SetSuccess(x interface{}) {
	p.Success = x.(*VectorThumbnailRespose)
}

var fieldIDToName_MapProcessorServiceVectorThumbnailResult = map[int16]string{
	0: "success",
}

func (p *MapProcessorServiceVectorThumbnailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MapProcessorServiceVectorThumbnailResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MapProcessorServiceVectorThumbnailResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MapProcessorServiceVectorThumbnailResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewVectorThumbnailRespose()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MapProcessorServiceVectorThumbnailResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VectorThumbnail_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MapProcessorServiceVectorThumbnailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MapProcessorServiceVectorThumbnailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MapProcessorServiceVectorThumbnailResult(%+v)", *p)

}

func (p *MapProcessorServiceVectorThumbnailResult) DeepEqual(ano *MapProcessorServiceVectorThumbnailResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MapProcessorServiceVectorThumbnailResult) Field0DeepEqual(src *VectorThumbnailRespose) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
