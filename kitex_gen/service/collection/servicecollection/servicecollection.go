// Code generated by Kitex v0.11.3. DO NOT EDIT.

package servicecollection

import (
	collection "cloud_tinamic/kitex_gen/service/collection"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GetCollections": kitex.NewMethodInfo(
		getCollectionsHandler,
		newServiceCollectionGetCollectionsArgs,
		newServiceCollectionGetCollectionsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"AddCollection": kitex.NewMethodInfo(
		addCollectionHandler,
		newServiceCollectionAddCollectionArgs,
		newServiceCollectionAddCollectionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Publish": kitex.NewMethodInfo(
		publishHandler,
		newServiceCollectionPublishArgs,
		newServiceCollectionPublishResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	serviceCollectionServiceInfo                = NewServiceInfo()
	serviceCollectionServiceInfoForClient       = NewServiceInfoForClient()
	serviceCollectionServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return serviceCollectionServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return serviceCollectionServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return serviceCollectionServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ServiceCollection"
	handlerType := (*collection.ServiceCollection)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "collection",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func getCollectionsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*collection.ServiceCollectionGetCollectionsArgs)
	realResult := result.(*collection.ServiceCollectionGetCollectionsResult)
	success, err := handler.(collection.ServiceCollection).GetCollections(ctx, realArg.PageSize, realArg.Page)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceCollectionGetCollectionsArgs() interface{} {
	return collection.NewServiceCollectionGetCollectionsArgs()
}

func newServiceCollectionGetCollectionsResult() interface{} {
	return collection.NewServiceCollectionGetCollectionsResult()
}

func addCollectionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*collection.ServiceCollectionAddCollectionArgs)
	realResult := result.(*collection.ServiceCollectionAddCollectionResult)
	success, err := handler.(collection.ServiceCollection).AddCollection(ctx, realArg.SourceKey, realArg.Title)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceCollectionAddCollectionArgs() interface{} {
	return collection.NewServiceCollectionAddCollectionArgs()
}

func newServiceCollectionAddCollectionResult() interface{} {
	return collection.NewServiceCollectionAddCollectionResult()
}

func publishHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*collection.ServiceCollectionPublishArgs)

	err := handler.(collection.ServiceCollection).Publish(ctx, realArg.Req)
	if err != nil {
		return err
	}

	return nil
}
func newServiceCollectionPublishArgs() interface{} {
	return collection.NewServiceCollectionPublishArgs()
}

func newServiceCollectionPublishResult() interface{} {
	return collection.NewServiceCollectionPublishResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetCollections(ctx context.Context, pageSize int64, page int64) (r *collection.GetCollectionsResponse, err error) {
	var _args collection.ServiceCollectionGetCollectionsArgs
	_args.PageSize = pageSize
	_args.Page = page
	var _result collection.ServiceCollectionGetCollectionsResult
	if err = p.c.Call(ctx, "GetCollections", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddCollection(ctx context.Context, sourceKey string, title string) (r *collection.AddCollectionResponse, err error) {
	var _args collection.ServiceCollectionAddCollectionArgs
	_args.SourceKey = sourceKey
	_args.Title = title
	var _result collection.ServiceCollectionAddCollectionResult
	if err = p.c.Call(ctx, "AddCollection", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Publish(ctx context.Context, req *collection.PublishRequest) (err error) {
	var _args collection.ServiceCollectionPublishArgs
	_args.Req = req
	var _result collection.ServiceCollectionPublishResult
	if err = p.c.Call(ctx, "Publish", &_args, &_result); err != nil {
		return
	}
	return nil
}
