// Code generated by thriftgo (0.3.17). DO NOT EDIT.

package vector

import (
	"bytes"
	"context"
	"fmt"
	thrift "github.com/cloudwego/kitex/pkg/protocol/bthrift/apache"
	"strings"
)

type QueryParameters struct {
	Limit      int32    `thrift:"limit,1" frugal:"1,default,i32" json:"limit"`
	Properties []string `thrift:"properties,2" frugal:"2,default,list<string>" json:"properties"`
	Resolution int32    `thrift:"resolution,3" frugal:"3,default,i32" json:"resolution"`
	Buffer     int32    `thrift:"buffer,4" frugal:"4,default,i32" json:"buffer"`
	Filter     string   `thrift:"filter,5" frugal:"5,default,string" json:"filter"`
	FilterCrs  int32    `thrift:"filterCrs,6" frugal:"6,default,i32" json:"filterCrs"`
}

func NewQueryParameters() *QueryParameters {
	return &QueryParameters{}
}

func (p *QueryParameters) InitDefault() {
}

func (p *QueryParameters) GetLimit() (v int32) {
	return p.Limit
}

func (p *QueryParameters) GetProperties() (v []string) {
	return p.Properties
}

func (p *QueryParameters) GetResolution() (v int32) {
	return p.Resolution
}

func (p *QueryParameters) GetBuffer() (v int32) {
	return p.Buffer
}

func (p *QueryParameters) GetFilter() (v string) {
	return p.Filter
}

func (p *QueryParameters) GetFilterCrs() (v int32) {
	return p.FilterCrs
}
func (p *QueryParameters) SetLimit(val int32) {
	p.Limit = val
}
func (p *QueryParameters) SetProperties(val []string) {
	p.Properties = val
}
func (p *QueryParameters) SetResolution(val int32) {
	p.Resolution = val
}
func (p *QueryParameters) SetBuffer(val int32) {
	p.Buffer = val
}
func (p *QueryParameters) SetFilter(val string) {
	p.Filter = val
}
func (p *QueryParameters) SetFilterCrs(val int32) {
	p.FilterCrs = val
}

var fieldIDToName_QueryParameters = map[int16]string{
	1: "limit",
	2: "properties",
	3: "resolution",
	4: "buffer",
	5: "filter",
	6: "filterCrs",
}

func (p *QueryParameters) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QueryParameters[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QueryParameters) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Limit = _field
	return nil
}
func (p *QueryParameters) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Properties = _field
	return nil
}
func (p *QueryParameters) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Resolution = _field
	return nil
}
func (p *QueryParameters) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Buffer = _field
	return nil
}
func (p *QueryParameters) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Filter = _field
	return nil
}
func (p *QueryParameters) ReadField6(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FilterCrs = _field
	return nil
}

func (p *QueryParameters) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryParameters"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QueryParameters) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("limit", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Limit); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QueryParameters) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("properties", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Properties)); err != nil {
		return err
	}
	for _, v := range p.Properties {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QueryParameters) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("resolution", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Resolution); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *QueryParameters) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("buffer", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Buffer); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *QueryParameters) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("filter", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Filter); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *QueryParameters) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("filterCrs", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.FilterCrs); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *QueryParameters) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryParameters(%+v)", *p)

}

func (p *QueryParameters) DeepEqual(ano *QueryParameters) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Limit) {
		return false
	}
	if !p.Field2DeepEqual(ano.Properties) {
		return false
	}
	if !p.Field3DeepEqual(ano.Resolution) {
		return false
	}
	if !p.Field4DeepEqual(ano.Buffer) {
		return false
	}
	if !p.Field5DeepEqual(ano.Filter) {
		return false
	}
	if !p.Field6DeepEqual(ano.FilterCrs) {
		return false
	}
	return true
}

func (p *QueryParameters) Field1DeepEqual(src int32) bool {

	if p.Limit != src {
		return false
	}
	return true
}
func (p *QueryParameters) Field2DeepEqual(src []string) bool {

	if len(p.Properties) != len(src) {
		return false
	}
	for i, v := range p.Properties {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *QueryParameters) Field3DeepEqual(src int32) bool {

	if p.Resolution != src {
		return false
	}
	return true
}
func (p *QueryParameters) Field4DeepEqual(src int32) bool {

	if p.Buffer != src {
		return false
	}
	return true
}
func (p *QueryParameters) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Filter, src) != 0 {
		return false
	}
	return true
}
func (p *QueryParameters) Field6DeepEqual(src int32) bool {

	if p.FilterCrs != src {
		return false
	}
	return true
}

type VectorService interface {
	GetTile(ctx context.Context, serviceKey string, x int32, y int32, zoom int8, ext string, params *QueryParameters) (r []byte, err error)
}

type VectorServiceGetTileArgs struct {
	ServiceKey string           `thrift:"service_key,1" frugal:"1,default,string" json:"service_key"`
	X          int32            `thrift:"x,2" frugal:"2,default,i32" json:"x"`
	Y          int32            `thrift:"y,3" frugal:"3,default,i32" json:"y"`
	Zoom       int8             `thrift:"zoom,4" frugal:"4,default,i8" json:"zoom"`
	Ext        string           `thrift:"ext,5" frugal:"5,default,string" json:"ext"`
	Params     *QueryParameters `thrift:"params,6" frugal:"6,default,QueryParameters" json:"params"`
}

func NewVectorServiceGetTileArgs() *VectorServiceGetTileArgs {
	return &VectorServiceGetTileArgs{}
}

func (p *VectorServiceGetTileArgs) InitDefault() {
}

func (p *VectorServiceGetTileArgs) GetServiceKey() (v string) {
	return p.ServiceKey
}

func (p *VectorServiceGetTileArgs) GetX() (v int32) {
	return p.X
}

func (p *VectorServiceGetTileArgs) GetY() (v int32) {
	return p.Y
}

func (p *VectorServiceGetTileArgs) GetZoom() (v int8) {
	return p.Zoom
}

func (p *VectorServiceGetTileArgs) GetExt() (v string) {
	return p.Ext
}

var VectorServiceGetTileArgs_Params_DEFAULT *QueryParameters

func (p *VectorServiceGetTileArgs) GetParams() (v *QueryParameters) {
	if !p.IsSetParams() {
		return VectorServiceGetTileArgs_Params_DEFAULT
	}
	return p.Params
}
func (p *VectorServiceGetTileArgs) SetServiceKey(val string) {
	p.ServiceKey = val
}
func (p *VectorServiceGetTileArgs) SetX(val int32) {
	p.X = val
}
func (p *VectorServiceGetTileArgs) SetY(val int32) {
	p.Y = val
}
func (p *VectorServiceGetTileArgs) SetZoom(val int8) {
	p.Zoom = val
}
func (p *VectorServiceGetTileArgs) SetExt(val string) {
	p.Ext = val
}
func (p *VectorServiceGetTileArgs) SetParams(val *QueryParameters) {
	p.Params = val
}

var fieldIDToName_VectorServiceGetTileArgs = map[int16]string{
	1: "service_key",
	2: "x",
	3: "y",
	4: "zoom",
	5: "ext",
	6: "params",
}

func (p *VectorServiceGetTileArgs) IsSetParams() bool {
	return p.Params != nil
}

func (p *VectorServiceGetTileArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VectorServiceGetTileArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VectorServiceGetTileArgs) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ServiceKey = _field
	return nil
}
func (p *VectorServiceGetTileArgs) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.X = _field
	return nil
}
func (p *VectorServiceGetTileArgs) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Y = _field
	return nil
}
func (p *VectorServiceGetTileArgs) ReadField4(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Zoom = _field
	return nil
}
func (p *VectorServiceGetTileArgs) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Ext = _field
	return nil
}
func (p *VectorServiceGetTileArgs) ReadField6(iprot thrift.TProtocol) error {
	_field := NewQueryParameters()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Params = _field
	return nil
}

func (p *VectorServiceGetTileArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTile_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VectorServiceGetTileArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("service_key", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ServiceKey); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VectorServiceGetTileArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("x", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.X); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VectorServiceGetTileArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("y", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Y); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *VectorServiceGetTileArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("zoom", thrift.BYTE, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Zoom); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *VectorServiceGetTileArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ext", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Ext); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *VectorServiceGetTileArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("params", thrift.STRUCT, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Params.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *VectorServiceGetTileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VectorServiceGetTileArgs(%+v)", *p)

}

func (p *VectorServiceGetTileArgs) DeepEqual(ano *VectorServiceGetTileArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ServiceKey) {
		return false
	}
	if !p.Field2DeepEqual(ano.X) {
		return false
	}
	if !p.Field3DeepEqual(ano.Y) {
		return false
	}
	if !p.Field4DeepEqual(ano.Zoom) {
		return false
	}
	if !p.Field5DeepEqual(ano.Ext) {
		return false
	}
	if !p.Field6DeepEqual(ano.Params) {
		return false
	}
	return true
}

func (p *VectorServiceGetTileArgs) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ServiceKey, src) != 0 {
		return false
	}
	return true
}
func (p *VectorServiceGetTileArgs) Field2DeepEqual(src int32) bool {

	if p.X != src {
		return false
	}
	return true
}
func (p *VectorServiceGetTileArgs) Field3DeepEqual(src int32) bool {

	if p.Y != src {
		return false
	}
	return true
}
func (p *VectorServiceGetTileArgs) Field4DeepEqual(src int8) bool {

	if p.Zoom != src {
		return false
	}
	return true
}
func (p *VectorServiceGetTileArgs) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Ext, src) != 0 {
		return false
	}
	return true
}
func (p *VectorServiceGetTileArgs) Field6DeepEqual(src *QueryParameters) bool {

	if !p.Params.DeepEqual(src) {
		return false
	}
	return true
}

type VectorServiceGetTileResult struct {
	Success []byte `thrift:"success,0,optional" frugal:"0,optional,binary" json:"success,omitempty"`
}

func NewVectorServiceGetTileResult() *VectorServiceGetTileResult {
	return &VectorServiceGetTileResult{}
}

func (p *VectorServiceGetTileResult) InitDefault() {
}

var VectorServiceGetTileResult_Success_DEFAULT []byte

func (p *VectorServiceGetTileResult) GetSuccess() (v []byte) {
	if !p.IsSetSuccess() {
		return VectorServiceGetTileResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VectorServiceGetTileResult) SetSuccess(x interface{}) {
	p.Success = x.([]byte)
}

var fieldIDToName_VectorServiceGetTileResult = map[int16]string{
	0: "success",
}

func (p *VectorServiceGetTileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VectorServiceGetTileResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VectorServiceGetTileResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VectorServiceGetTileResult) ReadField0(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.Success = _field
	return nil
}

func (p *VectorServiceGetTileResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTile_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VectorServiceGetTileResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBinary([]byte(p.Success)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VectorServiceGetTileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VectorServiceGetTileResult(%+v)", *p)

}

func (p *VectorServiceGetTileResult) DeepEqual(ano *VectorServiceGetTileResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VectorServiceGetTileResult) Field0DeepEqual(src []byte) bool {

	if bytes.Compare(p.Success, src) != 0 {
		return false
	}
	return true
}
