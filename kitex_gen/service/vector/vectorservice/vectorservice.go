// Code generated by Kitex v0.11.3. DO NOT EDIT.

package vectorservice

import (
	vector "cloud_tinamic/kitex_gen/service/vector"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GetTile": kitex.NewMethodInfo(
		getTileHandler,
		newVectorServiceGetTileArgs,
		newVectorServiceGetTileResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	vectorServiceServiceInfo                = NewServiceInfo()
	vectorServiceServiceInfoForClient       = NewServiceInfoForClient()
	vectorServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return vectorServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return vectorServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return vectorServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "VectorService"
	handlerType := (*vector.VectorService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "vector",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func getTileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*vector.VectorServiceGetTileArgs)
	realResult := result.(*vector.VectorServiceGetTileResult)
	success, err := handler.(vector.VectorService).GetTile(ctx, realArg.ServiceKey, realArg.X, realArg.Y, realArg.Zoom, realArg.Ext, realArg.Params)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVectorServiceGetTileArgs() interface{} {
	return vector.NewVectorServiceGetTileArgs()
}

func newVectorServiceGetTileResult() interface{} {
	return vector.NewVectorServiceGetTileResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetTile(ctx context.Context, serviceKey string, x int32, y int32, zoom int8, ext string, params *vector.QueryParameters) (r []byte, err error) {
	var _args vector.VectorServiceGetTileArgs
	_args.ServiceKey = serviceKey
	_args.X = x
	_args.Y = y
	_args.Zoom = zoom
	_args.Ext = ext
	_args.Params = params
	var _result vector.VectorServiceGetTileResult
	if err = p.c.Call(ctx, "GetTile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
